type AnnualBudgetUpdated @entity(immutable: true) {
  id: Bytes!
  oldValue: BigInt! # uint256
  newValue: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EarlyWithdrawalPenaltyUpdated @entity(immutable: true) {
  id: Bytes!
  stakeType: Int! # uint8
  oldValue: BigInt! # uint256
  newValue: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EmergencyWithdraw @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  sharesAmount: BigInt! # uint256
  hskAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExchangeRateUpdated @entity(immutable: true) {
  id: Bytes!
  totalPooledHSK: BigInt! # uint256
  totalShares: BigInt! # uint256
  newRate: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type HskPerBlockUpdated @entity(immutable: true) {
  id: Bytes!
  oldValue: BigInt! # uint256
  newValue: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type InsufficientRewards @entity(immutable: true) {
  id: Bytes!
  required: BigInt! # uint256
  available: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MaxHskPerBlockUpdated @entity(immutable: true) {
  id: Bytes!
  oldValue: BigInt! # uint256
  newValue: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MinStakeAmountUpdated @entity(immutable: true) {
  id: Bytes!
  oldValue: BigInt! # uint256
  newValue: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardsAdded @entity(immutable: true) {
  id: Bytes!
  amount: BigInt! # uint256
  from: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardsClaimed @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Stake @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  hskAmount: BigInt! # uint256
  sharesAmount: BigInt! # uint256
  stakeType: Int! # uint8
  lockEndTime: BigInt! # uint256
  stakeId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakingBonusUpdated @entity(immutable: true) {
  id: Bytes!
  stakeType: Int! # uint8
  oldValue: BigInt! # uint256
  newValue: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakingContractUpgraded @entity(immutable: true) {
  id: Bytes!
  newVersion: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unstake @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  sharesAmount: BigInt! # uint256
  hskAmount: BigInt! # uint256
  isEarlyWithdrawal: Boolean! # bool
  penalty: BigInt! # uint256
  stakeId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
