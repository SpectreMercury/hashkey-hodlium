type User @entity {
  id: ID!
  totalStaked: BigInt!
  totalUnstaked: BigInt!
  totalRewards: BigInt!
  stakes: [Stake!]! @derivedFrom(field: "user")
}

type Stake @entity {
  id: ID!
  user: User!
  hskAmount: BigInt! 
  sharesAmount: BigInt! 
  stakeType: Int! 
  lockEndTime: BigInt! 
  stakeId: BigInt! 
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  # Additional fields
  unstakeTransactionHash: Bytes
  unstakeAmount: BigInt
  isWithdrawn: Boolean!
  isEarlyWithdrawal: Boolean
  penalty: BigInt
  stakedAt: BigInt!
  unstakeAt: BigInt
  currentHskValue: BigInt
  profit: BigInt
  
  # New fields for locked stakes
  isLocked: Boolean
  isLockedUnstake: Boolean
}

type TokenTransfer @entity {
  id: ID!
  token: Bytes!
  from: Bytes!
  to: Bytes!
  amount: BigInt!
  transactionHash: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type EarlyWithdrawalPenaltyUpdated @entity {
  id: ID!
  stakeType: Int! 
  oldValue: BigInt! 
  newValue: BigInt! 
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EmergencyWithdraw @entity {
  id: ID!
  user: Bytes! 
  sharesAmount: BigInt! 
  hskAmount: BigInt! 
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AnnualBudgetUpdated @entity(immutable: true) {
  id: ID!
  oldValue: BigInt! # uint256
  newValue: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExchangeRateUpdated @entity(immutable: true) {
  id: Bytes!
  totalPooledHSK: BigInt! # uint256
  totalShares: BigInt! # uint256
  newRate: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type HskPerBlockUpdated @entity(immutable: true) {
  id: Bytes!
  oldValue: BigInt! # uint256
  newValue: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type InsufficientRewards @entity(immutable: true) {
  id: Bytes!
  required: BigInt! # uint256
  available: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input StakeWhereInput {
  user: Bytes
  isWithdrawn: Boolean
}

input StakeOrderByInput {
  stakedAt: OrderDirection
}

input TokenTransferWhereInput {
  from: Bytes
  to: Bytes
}

input TokenTransferOrderByInput {
  blockTimestamp: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

type MaxHskPerBlockUpdated @entity(immutable: true) {
  id: Bytes!
  oldValue: BigInt! # uint256
  newValue: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MinStakeAmountUpdated @entity(immutable: true) {
  id: Bytes!
  oldValue: BigInt! # uint256
  newValue: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardsAdded @entity(immutable: true) {
  id: Bytes!
  amount: BigInt! # uint256
  from: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardsClaimed @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakingBonusUpdated @entity(immutable: true) {
  id: Bytes!
  stakeType: Int! # uint8
  oldValue: BigInt! # uint256
  newValue: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakingContractUpgraded @entity(immutable: true) {
  id: Bytes!
  newVersion: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unstake @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  sharesAmount: BigInt! # uint256
  hskAmount: BigInt! # uint256
  isEarlyWithdrawal: Boolean! # bool
  penalty: BigInt! # uint256
  stakeId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StHSKOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}